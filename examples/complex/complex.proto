 syntax = "proto3";

package complex;

import "protogen/mcp/annotations.proto";

option go_package = "github.com/omrikiei/protoc-gen-mcp/examples/complex";

// Complex service demonstrating advanced MCP features
service ComplexService {
  // Example with multiple path parameters and resource handling
  rpc GetUserProfile(UserProfileRequest) returns (UserProfileResponse) {
    option (mcp.mcp_tool_description) = "Get user profile information";
    option (mcp.mcp_tool_title) = "Get User Profile";
    option (mcp.mcp_tool_read_only) = true;
  }

  // Example with nested path parameters and streaming
  rpc GetNestedResource(NestedRequest) returns (stream NestedResponse) {
    option (mcp.mcp_tool_description) = "Get nested resource information";
    option (mcp.mcp_tool_title) = "Get Nested Resource";
    option (mcp.mcp_tool_read_only) = true;
  }

  // Example with complex query parameters and resource listing
  rpc SearchResources(SearchRequest) returns (SearchResponse) {
    option (mcp.mcp_tool_description) = "Search for resources with complex filtering";
    option (mcp.mcp_tool_title) = "Search Resources";
    option (mcp.mcp_tool_read_only) = true;
  }

  // Example with resource writing and binary data
  rpc UploadResource(UploadRequest) returns (Resource) {
    option (mcp.mcp_tool_description) = "Upload a new resource";
    option (mcp.mcp_tool_title) = "Upload Resource";
    option (mcp.mcp_tool_destructive) = true;
  }
}

message UserProfileRequest {
  string user_id = 1 [(mcp.mcp_path_param) = true];
  string profile_id = 2 [(mcp.mcp_path_param) = true];
  bool include_details = 3 [(mcp.mcp_query_param) = true];
  int32 max_depth = 4 [(mcp.mcp_query_param) = true];
}

message UserProfileResponse {
  string user_id = 1;
  string profile_id = 2;
  string name = 3;
  string email = 4;
  map<string, string> metadata = 5;
  bytes avatar = 6;
}

message NestedRequest {
  string org_id = 1 [(mcp.mcp_path_param) = true];
  string team_id = 2 [(mcp.mcp_path_param) = true];
  string member_id = 3 [(mcp.mcp_path_param) = true];
  bool recursive = 4 [(mcp.mcp_query_param) = true];
}

message NestedResponse {
  string org_id = 1;
  string team_id = 2;
  string member_id = 3;
  string name = 4;
  string role = 5;
  repeated string permissions = 6;
}

message SearchRequest {
  string query = 1 [(mcp.mcp_query_param) = true];
  int32 page = 2 [(mcp.mcp_query_param) = true];
  int32 page_size = 3 [(mcp.mcp_query_param) = true];
  repeated string filters = 4 [(mcp.mcp_query_param) = true];
  bool include_deleted = 5 [(mcp.mcp_query_param) = true];
  string sort_by = 6 [(mcp.mcp_query_param) = true];
  bool sort_desc = 7 [(mcp.mcp_query_param) = true];
}

message SearchResponse {
  repeated Resource resources = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
  float progress_percent = 5;
}

message Resource {
  string id = 1;
  string name = 2;
  string type = 3;
  map<string, string> metadata = 4;
  bool deleted = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  bytes content = 8;
}

message UploadRequest {
  string name = 1 [(mcp.mcp_required) = true];
  string type = 2 [(mcp.mcp_required) = true];
  map<string, string> metadata = 3;
  bytes content = 4 [(mcp.mcp_required) = true];
}
