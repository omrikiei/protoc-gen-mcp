// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: examples/complex/complex.proto

package complex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplexService_GetUserProfile_FullMethodName    = "/complex.ComplexService/GetUserProfile"
	ComplexService_GetNestedResource_FullMethodName = "/complex.ComplexService/GetNestedResource"
	ComplexService_SearchResources_FullMethodName   = "/complex.ComplexService/SearchResources"
	ComplexService_UploadResource_FullMethodName    = "/complex.ComplexService/UploadResource"
)

// ComplexServiceClient is the client API for ComplexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Complex service demonstrating advanced MCP features
type ComplexServiceClient interface {
	// Example with multiple path parameters and resource handling
	GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	// Example with nested path parameters and streaming
	GetNestedResource(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NestedResponse], error)
	// Example with complex query parameters and resource listing
	SearchResources(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Example with resource writing and binary data
	UploadResource(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*Resource, error)
}

type complexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplexServiceClient(cc grpc.ClientConnInterface) ComplexServiceClient {
	return &complexServiceClient{cc}
}

func (c *complexServiceClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, ComplexService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexServiceClient) GetNestedResource(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NestedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ComplexService_ServiceDesc.Streams[0], ComplexService_GetNestedResource_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NestedRequest, NestedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComplexService_GetNestedResourceClient = grpc.ServerStreamingClient[NestedResponse]

func (c *complexServiceClient) SearchResources(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ComplexService_SearchResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexServiceClient) UploadResource(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*Resource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resource)
	err := c.cc.Invoke(ctx, ComplexService_UploadResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplexServiceServer is the server API for ComplexService service.
// All implementations must embed UnimplementedComplexServiceServer
// for forward compatibility.
//
// Complex service demonstrating advanced MCP features
type ComplexServiceServer interface {
	// Example with multiple path parameters and resource handling
	GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	// Example with nested path parameters and streaming
	GetNestedResource(*NestedRequest, grpc.ServerStreamingServer[NestedResponse]) error
	// Example with complex query parameters and resource listing
	SearchResources(context.Context, *SearchRequest) (*SearchResponse, error)
	// Example with resource writing and binary data
	UploadResource(context.Context, *UploadRequest) (*Resource, error)
	mustEmbedUnimplementedComplexServiceServer()
}

// UnimplementedComplexServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplexServiceServer struct{}

func (UnimplementedComplexServiceServer) GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedComplexServiceServer) GetNestedResource(*NestedRequest, grpc.ServerStreamingServer[NestedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetNestedResource not implemented")
}
func (UnimplementedComplexServiceServer) SearchResources(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResources not implemented")
}
func (UnimplementedComplexServiceServer) UploadResource(context.Context, *UploadRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadResource not implemented")
}
func (UnimplementedComplexServiceServer) mustEmbedUnimplementedComplexServiceServer() {}
func (UnimplementedComplexServiceServer) testEmbeddedByValue()                        {}

// UnsafeComplexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplexServiceServer will
// result in compilation errors.
type UnsafeComplexServiceServer interface {
	mustEmbedUnimplementedComplexServiceServer()
}

func RegisterComplexServiceServer(s grpc.ServiceRegistrar, srv ComplexServiceServer) {
	// If the following call pancis, it indicates UnimplementedComplexServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplexService_ServiceDesc, srv)
}

func _ComplexService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServiceServer).GetUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexService_GetNestedResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NestedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComplexServiceServer).GetNestedResource(m, &grpc.GenericServerStream[NestedRequest, NestedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComplexService_GetNestedResourceServer = grpc.ServerStreamingServer[NestedResponse]

func _ComplexService_SearchResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServiceServer).SearchResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexService_SearchResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServiceServer).SearchResources(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexService_UploadResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServiceServer).UploadResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexService_UploadResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServiceServer).UploadResource(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplexService_ServiceDesc is the grpc.ServiceDesc for ComplexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "complex.ComplexService",
	HandlerType: (*ComplexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _ComplexService_GetUserProfile_Handler,
		},
		{
			MethodName: "SearchResources",
			Handler:    _ComplexService_SearchResources_Handler,
		},
		{
			MethodName: "UploadResource",
			Handler:    _ComplexService_UploadResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNestedResource",
			Handler:       _ComplexService_GetNestedResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "examples/complex/complex.proto",
}
