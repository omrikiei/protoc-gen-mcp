syntax = "proto3";

package helloworld;

import "internal/protogen/mcp/annotations.proto";

option go_package = "github.com/omrikiei/protoc-gen-mcp/examples/helloworld";

// The greeting service definition.
service Greeter {
  option (mcp.annotations.mcp_service) = true;
  option (mcp.annotations.mcp_version) = "v1";
  option (mcp.annotations.mcp_type) = "greeter";

  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (mcp.annotations.mcp_tool) = true;
    option (mcp.annotations.mcp_tool_description) = "Sends a simple greeting to the user";
    option (mcp.annotations.mcp_tool_title) = "Say Hello";
    option (mcp.annotations.mcp_tool_read_only) = true;
    option (mcp.annotations.mcp_tool_idempotent) = true;
  }

  // Sends a greeting with query parameters
  rpc SayHelloWithQuery (HelloRequest) returns (HelloReply) {
    option (mcp.annotations.mcp_tool) = true;
    option (mcp.annotations.mcp_tool_description) = "Sends a greeting with additional query parameters";
    option (mcp.annotations.mcp_tool_title) = "Say Hello with Query";
    option (mcp.annotations.mcp_tool_read_only) = true;
    option (mcp.annotations.mcp_tool_idempotent) = true;
  }

  // Streams greetings
  rpc StreamGreetings (HelloRequest) returns (stream HelloReply) {
    option (mcp.annotations.mcp_tool) = true;
    option (mcp.annotations.mcp_tool_description) = "Streams multiple greetings to the user";
    option (mcp.annotations.mcp_tool_title) = "Stream Greetings";
    option (mcp.annotations.mcp_tool_read_only) = true;
    option (mcp.annotations.mcp_tool_idempotent) = true;
  }
}

// The request message containing the user's name.
message HelloRequest {
  option (mcp.annotations.mcp_required_roles) = "user";
  option (mcp.annotations.mcp_access_level) = "read";

  // The name of the person to greet
  string name = 1 [
    (mcp.annotations.mcp_path_param) = true,
    (mcp.annotations.mcp_query_param) = true,
    (mcp.annotations.mcp_validation_pattern) = "^[a-zA-Z0-9_]{3,50}$",
    (mcp.annotations.mcp_validation_message) = "Name must be 3-50 characters long and contain only letters, numbers, and underscores"
  ];

  // The language to use for the greeting
  string language = 2 [
    (mcp.annotations.mcp_query_param) = true,
    (mcp.annotations.mcp_validation_pattern) = "^(en|es|fr|de)$",
    (mcp.annotations.mcp_validation_message) = "Language must be one of: en, es, fr, de"
  ];

  // Whether to use formal greeting
  bool formal = 3 [(mcp.annotations.mcp_query_param) = true];

  // The number of times to repeat the greeting
  int32 repeat = 4 [
    (mcp.annotations.mcp_query_param) = true,
    (mcp.annotations.mcp_validation_pattern) = "^[1-9][0-9]?$",
    (mcp.annotations.mcp_validation_message) = "Repeat count must be between 1 and 99"
  ];
}

// The response message containing the greeting
message HelloReply {
  // The greeting message
  string message = 1;
  
  // Progress information
  int32 current_repeat = 2;
  int32 total_repeats = 3;
  float progress_percent = 4;
} 